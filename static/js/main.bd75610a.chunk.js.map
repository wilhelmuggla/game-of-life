{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["operations","App","useState","rows","i","push","Array","from","grid","setGrid","running","setRunning","React","interval","setInterval","layout","setLayout","runningRef","useRef","current","intervalRef","layoutRef","width","setWidth","elementRef","clear","setClear","useStyles","makeStyles","root","useEffect","getBoundingClientRect","console","log","runSimulation","useCallback","g","produce","gridCopy","k","neighbours","forEach","x","y","newI","newK","setTimeout","className","ref","Button","variant","color","onClick","disabled","Math","floor","random","Select","labelId","id","value","onChange","event","newValue","props","label","MenuItem","Typography","gutterBottom","Slider","min","track","max","aria-labelledby","style","display","gridTemplateColumns","map","col","key","newGrid","height","background","undefined","borderWidth","borderColor","borderStyle","margin","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bd75610a.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport produce from 'immer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n\n\nconst operations = [\n  [1, 0],\n  [-1, 0],\n  [0, 1],\n  [0, -1],\n  [1, 1],\n  [-1, -1],\n  [-1, 1],\n  [1, -1]\n];\n\n\n\n\nfunction App() {\n\n  let initial_layout = 50;\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < initial_layout; i++) {\n      rows.push(Array.from(Array(initial_layout), () => 0));\n    }\n    return rows;\n  });\n\n  const [running, setRunning] = useState(false);\n  const [interval, setInterval] = React.useState<number>(750);\n  const [layout, setLayout] = React.useState<number>(initial_layout);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const intervalRef = useRef(interval);\n  intervalRef.current = interval;\n\n  const layoutRef = useRef(layout);\n  layoutRef.current = layout;\n\n  const [width, setWidth] = useState(0);\n  const elementRef = React.useRef<HTMLDivElement>();\n\n  const [clear, setClear] =  React.useState<boolean>(false);\n\n  const useStyles = makeStyles({\n    root: {\n      width: 200,\n    },\n  });\n\n  useEffect(() => {\n    if (elementRef && elementRef.current) {\n      setWidth((elementRef.current.getBoundingClientRect().width - 30) / layout);\n    }\n  }, [layout]);\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(1000);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setInterval(newValue as number);\n  };\n\n  const changeLayout = (event: any, newValue: any) => {\n    console.log(newValue.props.value);\n    setLayout(newValue.props.value);\n  };\n\n  const changeClear = () => {\n    setClear(!clear);\n  }\n\n  useEffect(() => {\n        setGrid(() => {\n      const rows = [];\n      for (let i = 0; i < layout; i++) {\n        rows.push(Array.from(Array(layout), () => 0));\n      }\n      return rows;\n    });\n    setRunning(false);\n    console.log(grid);\n  },[layout, clear] );\n\n\n  const randomGrid = () => {\n    setGrid(() => {\n      const rows = [];\n      for (let i = 0; i < layout; i++) {\n        rows.push(Array.from(Array(layout), () => Math.floor(Math.random() * 10) < 9 ? 0 : 1));\n      }\n      return rows;\n    });\n    console.log(grid);\n    setRunning(false);\n  }\n\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current)\n      return;\n\n    //simulate\n    setGrid(g => {\n      console.log(layoutRef.current);\n      return produce(g, gridCopy => {\n        for (let i = 0; i < layoutRef.current; i++) {\n          for (let k = 0; k < layoutRef.current; k++) {\n            let neighbours = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < layoutRef.current && newK >= 0 && newK < layoutRef.current) {\n                neighbours += g[newI][newK];\n              }\n            })\n            if (neighbours < 2 || neighbours > 3) {\n              gridCopy[i][k] = 0;\n\n            } else if (g[i][k] === 0 && neighbours === 3) {\n              gridCopy[i][k] = 1;\n\n            }\n          }\n        }\n      })\n    });\n\n    setTimeout(runSimulation, intervalRef.current);\n  }, [])\n\n  return (\n    <div className=\"container\" ref={elementRef}>\n      <h1>Game Of Life</h1>\n      <div className=\"row\">\n        <div className=\"col-8 buttons\">\n          <div className=\"row\">\n\n            \n            <div className=\"col-3\">\n              <Button variant=\"contained\" color={\n                running ? 'primary' : 'secondary'}\n                onClick={() => {\n                  setRunning(!running);\n\n\n                  runningRef.current = true;\n                  runSimulation();\n\n                }}>{running ? 'stop' : 'start'}</Button>\n            </div>\n            <div className=\"col-3\">\n              <Button variant=\"contained\" onClick={changeClear}>Clear</Button>\n            </div>\n            <div className=\"col-3\">\n              <Button variant=\"contained\" disabled={running} onClick={randomGrid}>Random</Button>\n            </div>\n            <div className=\"col-3\">\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={layout}\n                onChange={changeLayout}\n                label=\"Layout\"\n                disabled={running}\n              >\n\n                <MenuItem value={10}>10x10</MenuItem>\n                <MenuItem value={20}>20x20</MenuItem>\n                <MenuItem value={35}>35x35</MenuItem>\n                <MenuItem value={50}>50X50</MenuItem>\n                <MenuItem value={100}>100X100</MenuItem>\n\n              </Select>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <Typography id=\"discrete-slider\" gutterBottom>\n                Speed\n      </Typography>\n              <Slider value={interval} min={100} track=\"inverted\" max={1500} onChange={handleChange} aria-labelledby=\"continuous-slider\" />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${layout}, ${width}px)`\n        }} className=\"big-grid\">\n        {grid.map((rows, i) =>\n          rows.map((col, k) =>\n            <div key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: width,\n                height: width,\n                background: grid[i][k] ? '#3f51b5' : undefined,\n                borderWidth: 1,\n                borderColor: '#e0e0e0',\n                borderStyle: 'solid',\n                margin: 0,\n                padding: 0\n              }}>\n            </div>))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}